// CONFIG2
#pragma config POSCMOD = NONE           // Primary Oscillator Select (HS Oscillator mode selected)
#pragma config OSCIOFNC = OFF           // Primary Oscillator Output Function (OSC2/CLKO/RC15 functions as CLKO (FOSC/2))
#pragma config FCKSM = CSDCMD           // Clock Switching and Monitor (Clock switching and Fail-Safe Clock Monitor are disabled)
#pragma config FNOSC = FRC              // Oscillator Select (Primary Oscillator with PLL module (HSPLL, ECPLL))
#pragma config IESO = OFF               // Internal External Switch Over Mode (IESO mode (Two-Speed Start-up) disabled)

// CONFIG1
#pragma config WDTPS = PS32768          // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128            // WDT Prescaler (Prescaler ratio of 1:128)
#pragma config WINDIS = ON              // Watchdog Timer Window (Standard Watchdog Timer enabled,(Windowed-mode is disabled))
#pragma config FWDTEN = OFF             // Watchdog Timer Enable (Watchdog Timer is disabled)
#pragma config ICS = PGx2               // Comm Channel Select (Emulator/debugger uses EMUC2/EMUD2)
#pragma config GWRP = OFF               // General Code Segment Write Protect (Writes to program memory are allowed)
#pragma config GCP = OFF                // General Code Segment Code Protect (Code protection is disabled)
#pragma config JTAGEN = OFF             // JTAG Port Enable (JTAG port is disabled)

#include "xc.h"
#include <libpic30.h>
#include <math.h>

#define BIT_VALUE(value, noBit) ((value >> noBit) & 1)

unsigned int portValue = 0, bcd = 0, sMove = 0, sDir = 1, qMove = 0, qBuffer = 0, tens = 0, ones = 0, qEnd = 0, temp = 7, count = 0, BIT = 0;
char prevButton6 = 6, prevButton7 = 7, currentButton6 = 0, currentButton7, program = 0;
int pRandom = 1, xor = 0;

// Funkcja zwracająca wartość sprzężenia zwrotnego na podstawie b1110011
int feedback(unsigned int value) {
    return BIT_VALUE(value, 0) ^ BIT_VALUE(value, 1) ^ BIT_VALUE(value, 2) ^ BIT_VALUE(value, 5) ^ BIT_VALUE(value, 6);
}

// Przerwanie od Timera 1
void __attribute__((interrupt, no_auto_psv)) _T1Interrupt(void) {
    switch (program) {
        case 0: // Licznik binarny od 0 do 255
            portValue++;
            LATA = portValue;
            break;
        case 1: // Licznik binarny od 255 do 0
            portValue--;
            LATA = portValue;
            break;
        case 2: // Licznik Graya od 0 do 255
            portValue++;
            LATA = (portValue >> 1) ^ portValue;
            break;
        case 3: // Licznik Graya od 255 do 0
            portValue--;
            LATA = (portValue >> 1) ^ portValue;
            break;
        case 4: // Licznik BCD od 0 do 99
            bcd++;
            ones = bcd % 10;
            tens = (bcd - ones) / 10;
            LATA = (tens * pow(2, 4) + ones);
            break;
        case 5: // Licznik BCD od 99 do 0
            bcd--;
            ones = bcd % 10;
            tens = (bcd - ones) / 10;
            LATA = (tens * pow(2, 4) + ones);
            break;
        case 6: // Wąż poruszający się w lewo i prawo
            if (sDir == 1) {
                if (sMove == 5) sDir = 0;
                sMove++;
                LATA = 7 * pow(2, sMove);
            } else {
                if (sMove == 0) sDir = 1;
                sMove--;
                LATA = 7 * pow(2, sMove);
            }
            break;
        case 7: // Kolejka
            qMove = 1 * pow(2, qBuffer);
            if (qBuffer == temp) {
                qEnd = 255 - (pow(2, temp) - 1);
                temp--;
                qMove = 0;
                qBuffer = 0;
                LATA = qEnd;
            } else {
                LATA = qEnd + qMove;
                qBuffer++;
            }
            break;
        case 8: // Generator pseudolosowych liczb na podstawie b1110011
            for (int i = 0; i < 5; i++) {
                xor = feedback(pRandom);
                pRandom = pRandom >> 1;
                pRandom += xor << 7;
                LATA = pRandom;
            }
            break;
    }
    _T1IF = 0;
}

int main(void) {
    TRISA = 0x0000;
    TRISD = 0xFFFF;
    T1CON = 0x8030;
    _T1IE = 1;
    _T1IP = 1;
    PR1 = 0x0FFF;
    while (1) {
        // Nawigacja przez programy za pomocą przycisków
        prevButton6 = PORTDbits.RD6;
        prevButton7 = PORTDbits.RD7;
        __delay32(15000);
        currentButton6 = PORTDbits.RD6;
        currentButton7 = PORTDbits.RD7;

        if (currentButton6 - prevButton6 == -1) { // Zmiana programu
            program--;
        }
        if (currentButton7 - prevButton7 == -1) {
            program++;
        }
        if (program > 8) { // Zapobiegaj wyborowi nieprawidłowego programu
            program = 0;
        }
        if (program < 0) {
            program = 8;
        }
        if (bcd > 99) bcd = 1; // Zapobiegaj wyjściu z zakresu zmiennych
        if (bcd == 0) bcd = 99;
        if (qBuffer > 8) qBuffer = 0;
        if (temp == 0) temp = 7, qBuffer = 0, qEnd = 0;
    }
    return 0;
}
